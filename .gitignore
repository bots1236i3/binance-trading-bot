import time
import ccxt

# ЁЯФ╣ Binance API Keys (рдЕрдкрдиреА API Key рдФрд░ Secret рдпрд╣рд╛рдБ рдбрд╛рд▓реЛ)
API_KEY = 'YOUR_BINANCE_API_KEY'
API_SECRET = 'YOUR_BINANCE_SECRET_KEY'

# ЁЯФ╣ Binance рдПрдХреНрд╕рдЪреЗрдВрдЬ рд╕реЗ рдХрдиреЗрдХреНрдЯ рдХрд░реЗрдВ
exchange = ccxt.binance({
    'apiKey': API_KEY,
    'secret': API_SECRET,
    'options': {'defaultType': 'spot'}
})

# ЁЯФ╣ рдЯреНрд░реЗрдбрд┐рдВрдЧ рд╕реЗрдЯрд┐рдВрдЧреНрд╕
symbol = 'BTC/USDT'  # рдмрд┐рдЯрдХреЙрдЗрди рдЯреНрд░реЗрдбрд┐рдВрдЧ рдкреЗрдпрд░
investment = 10  # рдкреНрд░рддрд┐ рдЯреНрд░реЗрдб $10 - рдЗрд╕реЗ 30 рддрдХ рдПрдбрдЬрд╕реНрдЯ рдХрд░ рд╕рдХрддреЗ рд╣реЛ
profit_target = 1.05  # 5% рдкреНрд░реЙрдлрд┐рдЯ рдЯрд╛рд░реНрдЧреЗрдЯ (1.05 = 5%)
stop_loss = 0.98  # 2% рд╕реНрдЯреЙрдк рд▓реЙрд╕ (0.98 = -2%)

# ЁЯФ╣ Moving Average Crossover Strategy
def get_moving_averages(symbol, timeframe='5m', length=50):
    candles = exchange.fetch_ohlcv(symbol, timeframe)
    closes = [candle[4] for candle in candles]
    return sum(closes[-length:]) / length

def get_rsi(symbol, timeframe='5m', period=14):
    candles = exchange.fetch_ohlcv(symbol, timeframe)
    closes = [candle[4] for candle in candles]
    gains, losses = [], []

    for i in range(1, len(closes)):
        change = closes[i] - closes[i-1]
        gains.append(max(change, 0))
        losses.append(abs(min(change, 0)))

    avg_gain = sum(gains[-period:]) / period
    avg_loss = sum(losses[-period:]) / period
    rs = avg_gain / avg_loss if avg_loss != 0 else 0
    rsi = 100 - (100 / (1 + rs))

    return rsi

# ЁЯФ╣ рдСрдЯреЛрдореЗрдЯреЗрдб рдЯреНрд░реЗрдбрд┐рдВрдЧ рдлрдВрдХреНрд╢рди
def trade():
    print("ЁЯФ╣ рдмреЙрдЯ рд╢реБрд░реВ рд╣реЛ рдЧрдпрд╛ рд╣реИ...")

    while True:
        try:
            price = exchange.fetch_ticker(symbol)['last']
            ma_50 = get_moving_averages(symbol, length=50)
            ma_200 = get_moving_averages(symbol, length=200)
            rsi = get_rsi(symbol)

            print(f"ЁЯФ╣ рд▓рд╛рдЗрд╡ рдкреНрд░рд╛рдЗрд╕: {price}, MA50: {ma_50}, MA200: {ma_200}, RSI: {rsi}")

            if ma_50 > ma_200 and rsi < 30:
                print("тЬЕ BUY рд╕рд┐рдЧреНрдирд▓ рдорд┐рд▓рд╛! рдЯреНрд░реЗрдб рд╢реБрд░реВ рдХрд░ рд░рд╣рд╛ рд╣реИ...")
                order = exchange.create_market_buy_order(symbol, investment / price)
                buy_price = order['price']

                target_price = buy_price * profit_target
                stop_loss_price = buy_price * stop_loss

                print(f"ЁЯОп рдЯрд╛рд░реНрдЧреЗрдЯ рдкреНрд░рд╛рдЗрд╕: {target_price}, тЭМ рд╕реНрдЯреЙрдк рд▓реЙрд╕: {stop_loss_price}")

                while True:
                    new_price = exchange.fetch_ticker(symbol)['last']

                    if new_price >= target_price:
                        print("тЬЕ рдкреНрд░реЙрдлрд┐рдЯ рдЯрд╛рд░реНрдЧреЗрдЯ рд╣рд┐рдЯ! рд╕реЗрд▓ рдХрд░ рд░рд╣реЗ рд╣реИрдВ...")
                        exchange.create_market_sell_order(symbol, investment / new_price)
                        break
                    elif new_price <= stop_loss_price:
                        print("тЭМ рд╕реНрдЯреЙрдк рд▓реЙрд╕ рд╣рд┐рдЯ! рд╕реЗрд▓ рдХрд░ рд░рд╣реЗ рд╣реИрдВ...")
                        exchange.create_market_sell_order(symbol, investment / new_price)
                        break

                    time.sleep(5)

            time.sleep(60)  # рд╣рд░ рдорд┐рдирдЯ рдбреЗрдЯрд╛ рдЕрдкрдбреЗрдЯ рдХрд░реЗрдЧрд╛

        except Exception as e:
            print(f"тЪая╕П Error: {e}")
            time.sleep(10)

# ЁЯФ╣ рдмреЙрдЯ рд╢реБрд░реВ рдХрд░реЗрдВ
trade()
